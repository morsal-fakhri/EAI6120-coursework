import pandas as pd
from IPython.display import Markdown, display
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from sklearn.metrics import roc_curve, auc
import numpy as np
from sklearn import metrics


adult = pd.read_csv('adult.csv')

column_names = ['age', 'workclass', 'fnlwgt', 'education', 'educational-num','marital-status', 'occupation', 'relationship', 'race', 'gender','capital-gain', 'capital-loss', 'hours-per-week', 'native-country','income']


# Setting all the categorical columns to type category
for col in set(adult.columns) - set(adult.describe().columns):
    adult[col] = adult[col].astype('category')
    
printmd('## 1.1. Columns and their types')
print(adult.info())


# Top 5 records
printmd('## 1.2. Data')
adult.head()




printmd('## 1.4. Missing values')
for i,j in zip(adult.columns,(adult.values.astype(str) == '?').sum(axis = 0)):
    if j > 0:
        printmd(str(i) + ': ' + str(j) + ' records')




adult['workclass'] = adult['workclass'].cat.remove_categories('?')
adult['occupation'] = adult['occupation'].cat.remove_categories('?')
adult['native-country'] = adult['native-country'].cat.remove_categories('?')



edu_level = {}
for x,y in adult[['educational-num','education']].drop_duplicates().itertuples(index=False):
    edu_level[y] = x


import matplotlib.pyplot as plt
import seaborn as sns

printmd('## 2.1. Education vs Income')
education = round(pd.crosstab(adult.education, adult.income).div(pd.crosstab(adult.education, adult.income).apply(sum, 1), 0), 2)
education = education.reindex(sorted(edu_level, key=edu_level.get, reverse=False))
sns.set_style("whitegrid")
fig, ax = plt.subplots(figsize=(12, 7))
education.plot(kind='bar', ax=ax, width=0.8, colormap='viridis', edgecolor='black')
ax.set_title('Proportion Distribution Across Education Levels', fontsize=14, fontweight='bold')
ax.set_xlabel('Education Level', fontsize=12)
ax.set_ylabel('Proportion of Population', fontsize=12)
ax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha='right')
ax.yaxis.grid(True, linestyle='--', alpha=0.7)
ax.legend(title="Income", loc="upper right", fontsize=11)
plt.savefig("t.png", dpi=300, bbox_inches='tight')

plt.show()








import matplotlib.pyplot as plt
import seaborn as sns

printmd('## 2.2 Gender vs Income')
gender = round(pd.crosstab(adult.gender, adult.income).div(pd.crosstab(adult.gender, adult.income).apply(sum, 1), 0), 2)
gender.sort_values(by='>50K', inplace=True)
sns.set_style("whitegrid")
fig, ax = plt.subplots(figsize=(8, 6))
gender.plot(kind='bar', ax=ax, width=0.6, colormap='viridis', edgecolor='black')  # Using viridis
ax.set_title('Proportion Distribution Across Gender Levels', fontsize=14, fontweight='bold')
ax.set_xlabel('Gender', fontsize=12)
ax.set_ylabel('Proportion of Population', fontsize=12)
ax.yaxis.grid(True, linestyle='--', alpha=0.7)
ax.legend(title="Income", loc="upper right", fontsize=11)
plt.savefig("tt.png", dpi=300, bbox_inches='tight')

plt.show()

















import matplotlib.pyplot as plt
import seaborn as sns

printmd('## Proportion Distribution Across Gender for Each Workclass')
gender_workclass = round(pd.crosstab(adult.workclass, [adult.income, adult.gender]).div(pd.crosstab(adult.workclass, [adult.income, adult.gender]).apply(sum, 1), 0), 2)
sns.set_style("whitegrid")

fig, ax = plt.subplots(figsize=(10, 8))
gender_workclass[[('>50K', 'Male'), ('>50K', 'Female')]].plot(kind='bar', ax=ax, width=0.7, colormap='viridis', edgecolor='black')
ax.set_title('Proportion Distribution Across Gender for Each Workclass', fontsize=14, fontweight='bold')
ax.set_xlabel('Workclass', fontsize=12)
ax.set_ylabel('Proportion of Population', fontsize=12)
ax.set_xticklabels(ax.get_xticklabels(), rotation=30, ha='right')
ax.yaxis.grid(True, linestyle='--', alpha=0.7)
ax.legend(title="Income & Gender", loc="upper right", fontsize=11)
plt.savefig("ttt.png", dpi=300, bbox_inches='tight')

plt.show()















import matplotlib.pyplot as plt
import seaborn as sns

printmd('## 2.3. Occupation vs Income')
occupation = round(pd.crosstab(adult.occupation, adult.income).div(pd.crosstab(adult.occupation, adult.income).apply(sum, 1), 0), 2)
occupation.sort_values(by='>50K', inplace=True)
sns.set_style("whitegrid")
fig, ax = plt.subplots(figsize=(12, 7))
occupation.plot(kind='bar', ax=ax, width=0.8, colormap='viridis', edgecolor='black')
ax.set_title('Proportion Distribution Across Occupation Levels', fontsize=14, fontweight='bold')
ax.set_xlabel('Occupation', fontsize=12)
ax.set_ylabel('Proportion of Population', fontsize=12)
ax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha='right')
ax.yaxis.grid(True, linestyle='--', alpha=0.7)
ax.legend(title="Income", loc="upper right", fontsize=11)
plt.savefig("tttt.png", dpi=300, bbox_inches='tight')

plt.show()









import matplotlib.pyplot as plt
import seaborn as sns

printmd('## 2.4. Workclass vs Income')
workclass = round(pd.crosstab(adult.workclass, adult.income).div(pd.crosstab(adult.workclass, adult.income).apply(sum, 1), 0), 2)
workclass.sort_values(by='>50K', inplace=True)
sns.set_style("whitegrid")
fig, ax = plt.subplots(figsize=(10, 7))
workclass.plot(kind='bar', ax=ax, width=0.8, colormap='viridis', edgecolor='black')
ax.set_title('Proportion Distribution Across Workclass Levels', fontsize=14, fontweight='bold')
ax.set_xlabel('Workclass', fontsize=12)
ax.set_ylabel('Proportion of Population', fontsize=12)
ax.set_xticklabels(ax.get_xticklabels(), rotation=30, ha='right')
ax.yaxis.grid(True, linestyle='--', alpha=0.7)
ax.legend(title="Income", loc="upper right", fontsize=11)
plt.savefig("ttttt.png", dpi=300, bbox_inches='tight')

plt.show()











import matplotlib.pyplot as plt
import seaborn as sns

printmd('## 2.5. Race vs Income')
race = round(pd.crosstab(adult.race, adult.income).div(pd.crosstab(adult.race, adult.income).apply(sum, 1), 0), 2)
race.sort_values(by='>50K', inplace=True)
sns.set_style("whitegrid")
fig, ax = plt.subplots(figsize=(10, 7))
race.plot(kind='bar', ax=ax, width=0.8, colormap='viridis', edgecolor='black')
ax.set_title('Proportion Distribution Across Race Levels', fontsize=14, fontweight='bold')
ax.set_xlabel('Race', fontsize=12)
ax.set_ylabel('Proportion of Population', fontsize=12)
ax.set_xticklabels(ax.get_xticklabels(), rotation=30, ha='right')
ax.yaxis.grid(True, linestyle='--', alpha=0.7)
ax.legend(title="Income", loc="upper right", fontsize=11)
plt.savefig("tttttt.png", dpi=300, bbox_inches='tight')

plt.show()





